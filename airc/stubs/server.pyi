"""
    AIRC server class and method stubs
"""

import asyncio
import websockets

from typing import Pattern, Dict, List, Coroutine
from .events import Event
from .master import ServerMaster
from .utils import SortedHandler, Cooldown, LineBuffer, IRCPrefix


_cap_subcommands: set = ...
_client_subcommands: set = ...
_rfc_pattern: str = ...
_regexp_rfc: Pattern = ...

def _handle_tags(tags: str) -> Dict[str, str]: ...

def _handle_args(args: str) -> List[str]: ...

def _handle_command(command: str) -> str: ...

def _handle_prefix(prefix: str) -> IRCPrefix: ...

class Server:

    __slots__ = ("loop", "master", "handlers", "socket", "connected")

    loop: asyncio.AbstractEventLoop
    master: ServerMaster
    handlers: Dict[str, List[SortedHandler]]
    socket: websockets.WebSocketClientProtocol
    connected: bool

    def __init__(self, master: ServerMaster = ..., loop: asyncio.AbstractEventLoop = ...) -> None: ...

    def add_global_handler(self, event: str, handler: type(Coroutine), priority: int = ...) -> None: ...

    def remove_global_handler(self, event: str, handler: type(Coroutine)) -> None: ...

    def add_handler(self, event: str, handler: type(Coroutine), priority: int = ...) -> None: ...

    def remove_handler(self, event: str, handler: type(Coroutine)) -> None: ...

    async def connect(self, uri: str, name: str, password: str = ...) -> None: ...

    async def process_data(self) -> None: ...

class TwitchServer(Server):

    __slots__ = ("user_type", "cooldown", "buffer", "uri", "username", "password")

    mod_cooldown: Cooldown = ...
    join_cooldown: Cooldown = ...

    user_type: str
    cooldown: Cooldown
    buffer: LineBuffer
    uri: str
    username: str
    password: str

    def __init__(self, master: ServerMaster = ..., user_type: str = ..., loop: asyncio.AbstractEventLoop = ...) -> None: super().__init__()

    def __str__(self) -> str: ...

    async def connect(self, uri: str, username: str, password: str = ...) -> None: ...

    async def disconnect(self) -> None: ...

    async def reconnect(self) -> None: ...

    async def process_data(self) -> None: ...

    async def _process_line(self, line: str) -> None: ...

    async def _handle_event(self, event: Event) -> None: ...

    async def cap(self, sub: str, *args: str) -> None: ...

    async def join(self, channel: str) -> None: ...

    async def nick(self, newnick: str) -> None: ...

    async def part(self, channel: str) -> None: ...

    async def pass_(self, password: str) -> None: ...

    async def pong(self, loc: str) -> None: ...

    async def privmsg(self, channel: str, message: str) -> None: ...

    async def quit(self, message: str) -> None: ...

    async def req_commands(self) -> None: ...

    async def req_membership(self) -> None: ...

    async def req_tags(self) -> None: ...

    async def user(self, username: str, realname: str) -> None: ...

    async def send_items(self, *items: str) -> None: ...

    async def send_raw(self, raw: str) -> None: ...